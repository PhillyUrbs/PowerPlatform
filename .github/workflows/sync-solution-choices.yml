name: sync-solution-choices

on:
  workflow_dispatch: {}
  push:
    paths:
      - solutions.json
      - .github/workflows/export-and-branch-solution.yml
      - .github/workflows/delete-solution.yml

permissions:
  contents: write

jobs:
  sync:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Sync dropdown options from solutions.json
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const jsonPath = path.join(process.env.GITHUB_WORKSPACE, 'solutions.json');
            const workflowPaths = [
              '.github/workflows/export-and-branch-solution.yml',
              '.github/workflows/release-action-call.yml',
              '.github/workflows/release-solution-to-prod.yml',
              '.github/workflows/delete-solution.yml'
            ];

            if (!fs.existsSync(jsonPath)) {
              core.setFailed(`JSON file not found: ${jsonPath}`);
              return;
            }
            let names;
            try {
              names = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));
            } catch (e) {
              core.setFailed(`Failed to parse solutions.json: ${e.message}`);
              return;
            }
            if (!Array.isArray(names)) {
              core.setFailed('solutions.json must be a JSON array of strings');
              return;
            }

            // normalize, dedupe, sort
            names = [...new Set(names.map(s => String(s).trim()).filter(Boolean))].sort();
            if (names.length === 0) {
              core.warning('solutions.json is empty after normalization; skipping dropdown sync to avoid empty choice lists');
              core.setOutput('changed', false);
              return;
            }

            const updateFile = (rel) => {
              const p = path.join(process.env.GITHUB_WORKSPACE, rel);
              if (!fs.existsSync(p)) {
                core.warning(`Workflow not found: ${rel}`);
                return false;
              }
              let content = fs.readFileSync(p, 'utf8');
              const nl = content.includes('\r\n') ? '\r\n' : '\n';
              const lines = content.replace(/\r\n?/g, '\n').split('\n');
              const startIdx = lines.findIndex(l => /#\s*GENERATED-OPTIONS-START/.test(l));
              const endIdx = lines.findIndex(l => /#\s*GENERATED-OPTIONS-END/.test(l));
              if (startIdx < 0 || endIdx < 0 || endIdx <= startIdx) {
                core.warning(`Markers not found or malformed in ${rel}; skipping`);
                return false;
              }
              const indent = (lines[startIdx].match(/^(\s*)/) || ['', ''])[1];
              const newBlock = names.map(n => `${indent}- ${n}`);
              const newLines = [
                ...lines.slice(0, startIdx + 1),
                ...newBlock,
                ...lines.slice(endIdx)
              ];
              const newContent = newLines.join(nl);
              if (newContent !== content) {
                fs.writeFileSync(p, newContent, 'utf8');
                core.info(`Updated options in ${rel}`);
                return true;
              }
              core.info(`No changes needed in ${rel}`);
              return false;
            };

            let changed = false;
            for (const wf of workflowPaths) {
              try {
                changed = updateFile(wf) || changed;
              } catch (e) {
                core.warning(`${wf}: ${e.message}`);
              }
            }
            core.setOutput('changed', changed)

      - name: Commit changes if any
        shell: pwsh
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          if (-not (git diff --quiet)) {
            git add .
            git commit -m "chore: sync solution dropdown options from solutions.json"
            git push
          } else {
            echo "No changes to commit"
          }
