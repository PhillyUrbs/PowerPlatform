# NOTE:
# This repository previously attempted to request the newer `workflows` permission (to allow
# committing changes to other workflow files). Your GitHub environment rejected the key with:
#   "Invalid workflow file: Unexpected value 'workflows'"
# That indicates the platform version in use does not yet recognize the `workflows` permission key.
# We fall back to only `contents: write`. To ensure commits to other workflow files succeed on
# older/stable GitHub environments, supply a classic PAT (scopes: repo, workflow) as a secret
# (e.g. `WORKFLOW_UPDATE_TOKEN`) and this workflow will use it for checkout/push.
name: Sync Solution Choices (Auto)

on:
  workflow_dispatch: {}
  push:
    paths:
      - solutions.json
      - .github/workflows/export-solution-from-dev.yml
      - .github/workflows/delete-solution.yml
      - .github/workflows/release-action-call.yml
      - .github/workflows/release-solution.yml
permissions:
  contents: write

jobs:
  sync:
    runs-on: windows-latest
    steps:
      - name: Resolve auth token (PAT optional)
        id: auth
        shell: bash
        env:
          PAT: ${{ secrets.WORKFLOW_UPDATE_TOKEN }}
        run: |
          if [ -n "${PAT}" ]; then
            echo "Using provided PAT for checkout/push" >&2
            echo "token=${PAT}" >> "$GITHUB_OUTPUT"
          else
            echo "PAT not provided; falling back to GITHUB_TOKEN" >&2
            echo "token=${GITHUB_TOKEN}" >> "$GITHUB_OUTPUT"
          fi
      - name: Checkout (uses PAT if provided)
        uses: actions/checkout@v5
        with:
          # Provide a classic PAT secret (WORKFLOW_UPDATE_TOKEN) with repo + workflow scopes to
          # allow committing changes to .github/workflows/*. If omitted, default token is used and
          # pushes that modify other workflow files may be rejected on some GitHub variants.
          token: ${{ steps.auth.outputs.token }}

      - name: Sync dropdown options from solutions.json
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const jsonPath = path.join(process.env.GITHUB_WORKSPACE, 'solutions.json');
            const workflowPaths = [
              '.github/workflows/export-solution-from-dev.yml',
              '.github/workflows/release-action-call.yml',
              '.github/workflows/release-solution.yml',
              '.github/workflows/delete-solution.yml'
            ];

            if (!fs.existsSync(jsonPath)) {
              core.setFailed(`JSON file not found: ${jsonPath}`);
              return;
            }
            let names;
            try {
              names = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));
            } catch (e) {
              core.setFailed(`Failed to parse solutions.json: ${e.message}`);
              return;
            }
            if (!Array.isArray(names)) {
              core.setFailed('solutions.json must be a JSON array of strings');
              return;
            }

            // normalize, dedupe, sort
            names = [...new Set(names.map(s => String(s).trim()).filter(Boolean))].sort();
            let placeholderMode = false;
            if (names.length === 0) {
              placeholderMode = true;
              names = ['<none>'];
              core.info('solutions.json is empty; inserting placeholder <none> into dropdowns.');
            }

            const updateFile = (rel) => {
              const p = path.join(process.env.GITHUB_WORKSPACE, rel);
              if (!fs.existsSync(p)) {
                core.warning(`Workflow not found: ${rel}`);
                return false;
              }
              let content = fs.readFileSync(p, 'utf8');
              const nl = content.includes('\r\n') ? '\r\n' : '\n';
              const lines = content.replace(/\r\n?/g, '\n').split('\n');
              const startIdx = lines.findIndex(l => /#\s*GENERATED-OPTIONS-START/.test(l));
              const endIdx = lines.findIndex(l => /#\s*GENERATED-OPTIONS-END/.test(l));
              if (startIdx < 0 || endIdx < 0 || endIdx <= startIdx) {
                core.warning(`Markers not found or malformed in ${rel}; skipping`);
                return false;
              }
              const indent = (lines[startIdx].match(/^(\s*)/) || ['', ''])[1];
              const newBlock = names.map(n => `${indent}- ${n}`);
              const newLines = [
                ...lines.slice(0, startIdx + 1),
                ...newBlock,
                ...lines.slice(endIdx)
              ];
              const newContent = newLines.join(nl);
              if (newContent !== content) {
                fs.writeFileSync(p, newContent, 'utf8');
                core.info(`Updated options in ${rel}`);
                return true;
              }
              core.info(`No changes needed in ${rel}`);
              return false;
            };

            let changed = false;
            for (const wf of workflowPaths) {
              try {
                changed = updateFile(wf) || changed;
              } catch (e) {
                core.warning(`${wf}: ${e.message}`);
              }
            }
            core.setOutput('changed', changed)

      - name: Commit changes if any
        shell: pwsh
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          if (-not (git diff --quiet)) {
            git add .
            git commit -m "chore: sync solution dropdown options from solutions.json"
            git push
          } else {
            echo "No changes to commit"
          }
