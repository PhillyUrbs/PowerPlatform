name: Release Solution (Manual)
# prepare for releasing to prod:
#   convert solution to managed (using a build PowerPlatform environment for the conversion)
#   upload the solution to the GitHub artifacts and deploy to the PROD environment

on:
  workflow_dispatch:
    inputs:
      # Change this value
      solution_name:
        description: 'name of the solution to worked on from Power Platform'
        required: true
        type: choice
        options:
          # GENERATED-OPTIONS-START
          - ALMLab
          - TechExcel
          # GENERATED-OPTIONS-END
      environment_name:
        description: 'GitHub environment holding all Power Platform env secrets/vars (BUILD + QA + PROD)'
        required: true
        type: choice
        options:
          - philurban-M365x06004729
      publish_target_env:
        description: 'Target stage to import managed solution (QA or PROD)'
        required: true
        type: choice
        options:
          - QA
          - PROD
        default: QA
  # no default; must be specified at dispatch time
      # Do Not change these values
      solution_shipping_folder:
        description: 'folder name for staging the exported solution *do not change*'
        required: true
        default: out/ship/
      solution_outbound_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        required: true
        default: out/solutions/
      solution_source_folder:
        description: 'folder name to be created and checked in *do not change*'
        required: true
        default: solutions/
      solution_release_folder:
        description: 'folder where the released binaries are going to be hosted *do not change*'
        required: true
        default: out/release

# edit your values here
env:
  BUILD_ENVIRONMENT_URL: ${{ vars.ENVIRONMENTURL_BUILD }}
  CLIENT_ID: ${{ secrets.POWERPLATFORMAPPID }}
  TENANT_ID: ${{ secrets.TENANTID }}

permissions:
  contents: write

jobs:
  convert-to-managed:
    runs-on: windows-latest
    environment: ${{ github.event.inputs.environment_name }}
    # or you can use ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
      - name: Validate selection is not placeholder
        if: ${{ github.event.inputs.solution_name == '<none>' }}
        shell: bash
        run: |
          echo "You must select a real solution name, not <none>." >&2
          exit 1

      - uses: actions/checkout@v5
        with:
          lfs: true

      - name: Install Power Platform CLI
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Pack Solution
        uses: microsoft/powerplatform-actions/pack-solution@v1
        with:
          solution-folder: ${{ github.event.inputs.solution_source_folder}}/${{ github.event.inputs.solution_name }}
          solution-file: ${{ github.event.inputs.solution_outbound_folder}}/${{ github.event.inputs.solution_name }}.zip
          solution-type: Unmanaged

      - name: Import solution as unmanaged to build env
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{env.BUILD_ENVIRONMENT_URL}}
          app-id: ${{env.CLIENT_ID}}
          client-secret: ${{ secrets.POWERPLATFORMAPPSECRET }}
          tenant-id: ${{env.TENANT_ID}}
          solution-file: ${{ github.event.inputs.solution_outbound_folder}}/${{ github.event.inputs.solution_name }}.zip
          force-overwrite: true
          publish-changes: true

      - name: Export solution as managed
        uses: microsoft/powerplatform-actions/export-solution@v1
        with:
          environment-url: ${{env.BUILD_ENVIRONMENT_URL}}
          app-id: ${{env.CLIENT_ID}}
          client-secret: ${{ secrets.POWERPLATFORMAPPSECRET }}
          tenant-id: ${{env.TENANT_ID}}
          solution-name: ${{ github.event.inputs.solution_name }}
          managed: true
          solution-output-file: ${{ github.event.inputs.solution_shipping_folder}}/${{ github.event.inputs.solution_name }}.zip

      - name: Upload the ready to ship solution to GH artifact store
        uses: actions/upload-artifact@v4
        with:
          name: managedSolutions
          path: ${{ github.event.inputs.solution_shipping_folder}}/${{ github.event.inputs.solution_name }}.zip

  release-to-environment:
    needs: [convert-to-managed]
    runs-on: windows-latest
    environment: ${{ github.event.inputs.environment_name }}
    env:
      RUNNER_DEBUG: 1

    steps:
      - uses: actions/checkout@v5
        with:
          lfs: true

      - name: Install Power Platform CLI
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Resolve target environment URL
        id: resolve_target
        shell: bash
        run: |
          set -euo pipefail
          target="${{ github.event.inputs.publish_target_env }}"
          if [ "$target" = "PROD" ]; then
            echo "TARGET_ENVIRONMENT_URL=${{ vars.ENVIRONMENTURL_PROD }}" >> "$GITHUB_ENV"
            echo "Resolved target to PROD";
          else
            echo "TARGET_ENVIRONMENT_URL=${{ vars.ENVIRONMENTURL_QA }}" >> "$GITHUB_ENV"
            echo "Resolved target to QA";
          fi

      - name: Fetch the ready to ship solution from GH artifact store
        uses: actions/download-artifact@v5
        with:
          name: managedSolutions
          path: ${{ github.event.inputs.solution_release_folder}}

      - name: Import managed solution to target env (QA/PROD)
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{env.TARGET_ENVIRONMENT_URL}}
          app-id: ${{env.CLIENT_ID}}
          client-secret: ${{ secrets.POWERPLATFORMAPPSECRET }}
          tenant-id: ${{env.TENANT_ID}}
          solution-file: ${{ github.event.inputs.solution_release_folder}}/${{ github.event.inputs.solution_name }}.zip
          force-overwrite: true
          publish-changes: true
